{"version":3,"file":"static/js/459.d0b70640.chunk.js","mappings":"gMACA,EAAuB,mBAAvB,EAAiD,mBAAjD,EAAoF,4BAApF,EAAwH,oB,qDC+CxH,EAxCa,WACX,IAAQA,EAAqCC,EAA/BC,EAA+BD,EAAzBE,EAAyBF,EAAlBG,EAAkBH,EAErCI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeN,EAASI,GAASG,MAAMC,QAAQC,MAChD,GAAE,CAACT,KAGF,6BACGG,EAAKO,OAAS,GACb,eAAIC,UAAWhB,EAAf,SACGQ,EAAKS,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAC5B,OACE,gBAAIJ,UAAWd,EAAf,UACGkB,GACC,gBACEC,IAAG,yCAAoCD,GACvCE,IAAG,UAAKH,MAGV,gBAAKE,IAAKE,EAAgBD,IAAG,iBAE/B,iBAAKN,UAAWZ,EAAhB,WACE,eAAIY,UAAWb,EAAf,SAAuBgB,IADzB,OAEGD,QAFH,IAEGA,EAAAA,GAAa,0CAAWA,YAXHM,EAAAA,EAAAA,MAe7B,OAGH,cAAGR,UAAU,QAAb,gDAIP,C,4LC1CKS,EAAU,mCACVC,EAAW,gCAGXC,EAAiB,mCAAG,WAAMC,GAAN,gGAECC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBD,IAHrB,cAEhBK,EAFgB,yBAMfF,EAAUE,EAASC,KAAKC,UANT,gCAQtBnB,QAAQoB,IAAR,UAAe,KAAMd,KAArB,aAA8B,KAAMe,UARd,yDAAH,sDAYjBC,EAAc,mCAAG,WAAO9B,EAAS+B,GAAhB,gGAEIP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDrB,EADC,oBACkBoB,EADlB,oBAFJ,cAEbK,EAFa,yBAMZM,EAASN,EAASC,OANN,gCAQnBlB,QAAQoB,IAAR,UAAe,KAAMd,KAArB,aAA8B,KAAMe,UARjB,yDAAH,wDAadvB,EAAc,mCAAG,WAAON,EAASI,GAAhB,gGAEIoB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDrB,EADC,4BAC0BoB,EAD1B,oBAFJ,cAEbK,EAFa,yBAMZrB,EAAQqB,EAASC,KAAKvB,OANV,gCAQnBK,QAAQoB,IAAR,UAAe,KAAMd,KAArB,aAA8B,KAAMe,UARjB,yDAAH,wDAYdG,EAAiB,mCAAG,WAAOC,EAAOC,GAAd,kGAECV,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcD,EADd,kBAC+Ba,EAD/B,gCAFD,cAEhBR,EAFgB,OAKhBC,EAAOD,EAASC,KAAKC,QALL,kBAMfO,EAAkBR,IANH,gCAQtBlB,QAAQoB,IAAR,UAAe,KAAMd,KAArB,aAA8B,KAAMe,UARd,yDAAH,wDAajBM,EAAiB,mCAAG,WAAOnC,EAASoC,GAAhB,gGAECZ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDrB,EADC,4BAC0BoB,EAD1B,oBAFD,cAEhBK,EAFgB,yBAMfW,EAAWX,EAASC,KAAKC,UANV,gCAQtBnB,QAAQoB,IAAR,UAAe,KAAMd,KAArB,aAA8B,KAAMe,UARd,yDAAH,uD,8ICzDhB,IAkBIV,EAAS,eAACkB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-05-movies/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.jsx","services/fetch.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__oOD41\",\"item\":\"Cast_item__vxHbm\",\"text__wrapper\":\"Cast_text__wrapper__9BwT7\",\"title\":\"Cast_title__rq9b2\"};","import styles from './Cast.module.css';\nimport placeholderImg from '../../components/img/placeholder.png';\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/fetch';\nimport { nanoid } from 'nanoid';\n\n\nconst Cast = () => {\n  const { list, item, title, text__wrapper } = styles;\n\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    fetchMovieCast(movieId, setCast).catch(console.error);\n  }, [movieId]);\n\n  return (\n    <section>\n      {cast.length > 0 ? (\n        <ul className={list}>\n          {cast.map(({ character, name, profile_path }) => {\n            return (\n              <li className={item} key={nanoid()}>\n                {profile_path ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                    alt={`${name}`}\n                  />\n                ) : (\n                  <img src={placeholderImg} alt={`Placeholder`} />\n                )}\n                <div className={text__wrapper}>\n                  <h4 className={title}>{name}</h4>\n                  {character ?? <p> {`as ${character}`}</p>}\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p className=\"error\">Sorry, the cast is not available!</p>\n      )}\n    </section>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\n\n\nconst API_KEY = '24d71428afc96f148d79022ebc2767a3';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n\nconst fetchTrendyMovies = async setMovies => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n\n    return setMovies(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nconst fetchMovieById = async (movieId, setMovie) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setMovie(response.data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n\nconst fetchMovieCast = async (movieId, setCast) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setCast(response.data.cast);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nconst fetchMovieByQuery = async (query, setSearchedMovies) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n    );\n    const data = response.data.results;\n    return setSearchedMovies(data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n\nconst fetchMovieReviews = async (movieId, setReviews) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setReviews(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n\n\n\nexport {\n  fetchMovieById,\n  fetchTrendyMovies,\n  fetchMovieCast,\n  fetchMovieReviews,\n  fetchMovieByQuery,\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["list","styles","item","title","text__wrapper","movieId","useParams","useState","cast","setCast","useEffect","fetchMovieCast","catch","console","error","length","className","map","character","name","profile_path","src","alt","placeholderImg","nanoid","API_KEY","BASE_URL","fetchTrendyMovies","setMovies","axios","response","data","results","log","message","fetchMovieById","setMovie","fetchMovieByQuery","query","setSearchedMovies","fetchMovieReviews","setReviews","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}